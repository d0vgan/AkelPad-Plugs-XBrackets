Nov 2024
--------
+ тепер код, специфічний для не-Юнікодної Windows, знаходиться всередині блоків
  `#ifdef XBR_OLD_WINDOWS`.
  Для 64-бітної версії XBrackets ці блоки коду ігноруються (не компілюються).
  Як наслідок, 64-бітна XBrackets.dll має менший розмір і працює швидше,
  оскільки їй не треба перевіряти умови `if (g_bOldWindows)`.

+ виправлено: функція GetNearestBracketsRange могла відпрацювати некоректно
  у специфічних випадках з HTML/XML тегами на зразок
    <p>text ( <code>url</code> )| </p>
  У такій ситуації права дужка ідентифікувалася як ')' (tbtBracket), а ліва
  ідентифікувалася як '>' (tbtTagInv).
  Щоби запобігти цьому, був доданий флаг gnbrfNoTagInv, при якому тип дужки
  tbtTagInv не повертається. Також функція GetNearestBracketsRange розширена
  додатковим пошуком парних дужок, коли для tbtTagInv не було знайдено пари.
  Нагадую, що ідея tbtTagInv полягає у виділенні текста всередині тегу, як-от:
    <tag>text to be selected</tag>

+ виправлено: функція GetNearestBracketsRange могла відпрацювати некоректно
  для WidenNearestBracketsSelection у специфічних випадках з tbtTagInv.
  Наприклад, коли WidenNearestBracketsSelection викликався кілька разів у таких
  умовах:
    <p>text ( <code>url</code> )| </p>
    <p|>text ( <code>url</code> ) </p>

* відмічу, що функція WidenNearestBracketsSelection у випадку вкладених тегів
  на зразок:
    <p>text1 <a href="1.html">(1)</a>; text2 <a href="2.html">(2)</a>.</p>
  буде працювати коректно тільки при наявності плагіна Coder із активною
  синтаксичною темою XML або HTML. І навіть тоді, після застосування функції
  JoinNearestBracketsRanges, результат чергового виділення може виглядати ось
  так:
    <[p> ... </p]>
  а не так:
    <p>[ ... ]</p>
  Так відбувається тому, що сам плагін XBrackets оперує на рівні дужок, тобто
  окремих символів '<' та '>'. Отримуючи інформацію від плагіна Coder, плагін
  XBrackets може дізнатися про діапазон, який вказує на початок і кінець
  певного тегу, але ж XBrackets нічого не знає про тег як окрему сутність.
  Я не кажу, що це неможливо зробити. В принципі, всю інформацію про тег можна
  витягти зі структури AEFINDFOLD, яку XBrackets отримує через AEM_FINDFOLD.
  Але тоді доведеться переглянути всю логіку роботи з дужками, які XBrackets
  наразі вважає завжди односимвольними (за виключенням tbtTag2 із його "/>",
  для котрого передбачені додаткові перевірки).


May 2022
--------
+ улучшено: теперь bAkelPadIsStarting устанавливается по AKDN_MAIN_ONSTART_PRESHOW
  и снимается по AKDN_MAIN_ONSTART_FINISH.
  Добавлен bIsMainWindowShown, который устанавливается по AKDN_MAIN_ONSTART_SHOW
  либо из функций плагина при (!pd->bOnStart).
  Почему это важно: не имеет смысла считывать информацию про скобки и перерисовывать
  их до обработки AKDN_MAIN_ONSTART_FINISH. Тем более что плагин Sessions открывает
  файлы из сессии по событию AKDN_MAIN_ONSTART_SHOW. А мы хотим исключить перерисовку
  скобок во время открытия файлов сессии.

+ улучшено: теперь OnEditGetActiveBrackets принимает 3 параметра вместо структуры,
  в которой всё равно не использовались два поля.


Apr 2021
--------
+ исправлено: в NearestBr_ApplyStateToRange добавлена проверка условия
  state->nLeftBrPos < state->nRightBrPos, потому что вызванная перед ней
  функция NearestBr_FindLeftBracket может не найти скобку и вернуть FALSE,
  после чего функция NearestBr_AdjustLeftBracketPos установит значение
  state->nLeftBrPos = poci->cookies[0].nPos без дополнительных проверок.
  Проверочный пример:
    x "A_B=", |"/CD=" y

+ новая ф-ция WidenNearestBracketsSelection. Использует ту же самую ф-цию
  GetNearestBracketsRange, на которой основана OnEditGetNearestBracketsFunc.
  Введён флаг gnbrfWiden, влияющий на логику обнаружения ближайших скобок.
  Проверочные примеры для WidenNearestBracketsSelection:
    (   (  [  ] { }  )    )   (   (  [  ] { }  )""[]    )
    (   (  [  ] { }  )" "[ ]    )  (   " "(  [  ] { }  )" "[ ]    )
    (   (  [  ] { }  )" "[ ]" "    ) (   " "(  [  ] { }  )" "[ ]" "    )
    {}()"" ""{}()""  {}()""[][] {}""()""[]""[]
    ({}()"")    ( ""{}()"" )    (   (  [  ] { } ()  )    )
    x "A_B=", "/CD=" y   {  [  (){} ()""  ]  {}()[]{}{}()[]  }
    "A B C" D" {
    x ["[A_B=]", "/CD=" y]   x [y "/CD=", "[A_B=]"]
    "123" }
    ( . {D F})   ({D F} . )   ("123")   "(123)"
    ("[ab]"  )   (  "[ab]")   (  "[ab]"  )   "  ( )"   "( )  "   "  ( )  "
    "[(ab)]  "   "  [(ab)]"   "  [(ab)]  "
    " [ "     ]      ()   []
    (abc)(def)(ghi) (abc)  (def)  (ghi)
    (abc) (def)(ghi)   (abc)(def) (ghi)
    x (abc)(def)(ghi) y
    ((short)(unsigned int)(a)(int))
    ( (short) (unsigned int) ( (a)) (int) )
    (  (short)   (unsigned int)   (a)  (int)  )
    (  (abc)(def) (ghi) (abc)(def) (ghi) )
    (  (abc) (def) (ghi) (abc) )


Sep 2018
--------
+ новые ф-ции GoToNearestBracket и SelToNearestBrackets.
  Их реализация достаточно сильно опирается на плагин Coder, и без него
  будет "хромать" (хотя с обычным текстом справляется довольно неплохо).
  Для информации: ф-ция OnEditGetNearestBracketsFunc использует собственный
  алгоритм поиска парных скобок, который отличается от алгоритма в ф-ции
  GetHighlightIndexes. В случае нескольких пар скобок, например:
    (  [ { abc } ]  |  { { } }  )
  она пытается определить ближайшие парные скобки, расположенные по _разные_
  стороны от каретки, (в данном случае пропуская пары [ ], а также { },
  расположенные по _одну_ сторону от каретки).


Jul 2016
--------
+ теперь XBrackets (как и QSearch) собирается с ключами /GS- и /NODEFAULTLIB .
  Также явно указан /ENTRY:DllMain .
  В местах, где компилятор хочет вызвать memset и memcpy, используются функции
  из XMemStrFunc.c, замещающие стандартные memset и memcpy.


May 2015
--------
+ теперь XBrackets учитывает AELB_WRAP, работая с перенесенными
  (wrapped) строками.
  Пока выполняется условие  (nLineBreak == AELB_WRAP),  поиск  в
  заданном направлении продолжается, с каждой перенесенной строкой
  увеличивая значение nWrappedLines.


Apr 2015
--------
+ теперь алгоритм поиска парных кавычек основан на "оценочном"
  сравнении. См. использование ф-ций getDirectionRank, а также
  containsSymbolToTheLeft и containsSymbolToTheRight.
  При неоднозначности обе найденные пары кавычек "взвешиваются"
  для принятия решения о том, которую из них подсвечивать.


Apr 2015
--------
+ теперь OnEditGetActiveBrackets умеет XBR_GBF_UPDATEHLDATA
+ обрабатываем AEM_HLSETTHEME
+ теперь AEN_TEXTCHANGING и AEN_TEXTCHANGED обрабатываются только при
  условиях (pnmhdr->hwndFrom == g_hFocusedEditWnd) &&
   (IsBracketsHighlight(uBracketsHighlight) && !bOpeningNewDocument).
+ добавлен BOOL bAkelPadIsStarting, чтобы исключить попытки перерисовки
  скобок, пока AkelPad запускается.


May 2014
--------
- AKD_GETEDITINFO может вернуть FALSE, если нет информации по окну.
  Структура EDITINFO в этом случае не заполняется.


Sep 2013
--------
+ подкорректировано "распухание" подсвеченных скобок при прокрутке текста,
  вызванное сглаживания шрифтов ClearType. Реализация взята из плагина
  SpecialChar - см. использование переменной bClearType в "AutoBrackets.c"


Sep 2012
--------
* обработка стилей шрифта соответствует принятой в AkelPad:
  - "жирный" и "курсив" считаются элементами, которые могут смешиваться
  друг с другом;
  - "нормальный" стиль считается отдельной сущностью.
  Это влияет на обработку настройки игнорирования стиля "нормальный":
  например, курсивный шрифт не считается смесью "курсив + нормальный",
  в которой можно было бы игнорировать "нормальную" составляющую.


Dec 2011
--------
* всегда используем pd->wLangModule в качестве текущего языка


Mar - May 2011
--------------
+ добавлен алгоритм для поиска парной кавычки (и прочих вариантов, в которых
  открывающая и закрывающая скобки совпадают)...
+ ... и несколько раз изменён :)
+ ... и в коде добавлено несколько комментариев, чтобы не сойти с ума :)
      см. GetHighlightIndexes, getDuplicatedPairDirection
+ хак: перед прорисовкой подсвеченного символа скобки сперва рисуем этот
  же символ цветом фона и с наклонным начертанием, чтобы избежать наложения
  подсвеченного символа на его наклонный вариант, прорисованный с помощью
  Coder::Highlight
+ добавляем поддержку AkelPad x64...
+ учимся использовать AEM_HLGETHIGHLIGHT и AEM_FINDFOLD...
+ учитываем, что стиль символа в выделении отличается от стиля без выделения
+ особая обработка для тегов (могут быть <.../> или <...> ... </...>)
+ при поиске парной кавычки символ перевода строки ('\n' или '\r') приравнян
  к '\0', что позволяет определить кавычку в начале строки как открывающую,
  а в конце строки - как закрывающую
+ в многосимвольном комментарии ищется символ скобки, чтобы не подсветить
  что-то левое :)
+ то же самое для многосимвольного fold (например, {[ ... }] )


Oct 2010
--------
+ добавляем параллельную настройку цветов парных скобок и их фона
* как следствие, изменения в диалоге настроек
  (код для выбора цвета слизан с плагина Lineboard)
* как следствие, исключаем HexStr.c (больше не нужен)
+ теперь измененные настройки сохраняются сразу по нажатию кнопки OK
+ наводим порядок в инициализации глобальных переменных


17 May - 27 May 2010
--------------------
+ добавляем поддержку рус. и укр. языков в окне настроек...
  (реализация слизана с QSearch, но несколько изменена)


9 Feb 2010
----------
- если AKD_GETFONT для hActualEditWnd возвращает NULL, то запрашиваем
  AKD_GETFONT для текущего окна редактирования (NULL в качестве wParam)


4 Nov 2009
----------
* AkelDLL.h и AkelEdit.h от версии 4.3.5


14 Oct - 18 Oct 2009
--------------------
+ улучшен алгоритм "перепечатывания" автоматически добавленной скобки
  (теперь закрывающую скобку можно "перепечатать" не только сразу после
  открывающей скобки, но и в том случае, если непосредственно перед ней
  были набраны другие символы)
+ пользовательские настройки в XBrackets.ini
+ пользователь может задавать свои пары скобок (свершилось!!! :))
+ подкорректирована обработка символа ' поскольку он может быть правой
  скобкой в пользовательской паре скобок `'
+ настройка набора символов next_char_ok и prev_char_ok вынесена в
  пользовательские настройки (XBrackets.ini)
+ обновлена документация плагина (файлы .txt)
* пока осталась проблема с WM_CHAR при Alt+NumPad с отключенным NumLock
  (плагин отрабатывает WM_CHAR, которого, по идее, не должно быть)


26 Aug 2009
-----------
* теперь SelToMatchingBracket при выделении снизу вверх оставляет
  каретку сверху, а не снизу


4 Mar 2009
----------
+ галочка tfmComment1, оказывается!!! ;) , влияет и на "встроенные"
  типы Cpp, Pas и т.д.
- исправлено: поддержка разделяемых окон в AkelPad 4.1.6


28 Feb 2009
-----------
+ улучшен "вид" SelToMatchingBracket
+ изменения в диалоге настроек плагина


26 Feb 2009
-----------
+ добавлена ф-ция SelToMatchingBracket


Feb 2009
--------
+ тип файла (маска) nCurrentFileType2 определяет "семейство" файла:
  tfmComment1 - файл, в котором "//" является комментарием;
  tfmHtmlCompatible - файл с html-тегами
+ в AkelEdit парные скобки находятся гораздо быстрее, так как
  плагин использует прямой доступ к данным строки
- исправлено: при включенном автозакрытии скобок последовательное
  нажатие вида '(' Delete ')' не печатало закрывающую скобку


3 Dec - 6 Dec 2008
------------------
+ закрывающая скобка, напечатанная сразу после открывающей скобки,
  печатается "поверх" автоматически добавленной закрывающей скобки
  (при активном автозавершении скобок)
+ новая настройка: пропускать символы скобок после '\' т.е.
  при печати "\(" или "\{" правая скобка не добавляется автоматически,
  и скобки вида "\( )" или "[ \]" не считаются парными
+ добавлена проверка количества '\' перед скобкой: парное количество
  символов '\' не "экранирует" скобку (например, "\\\\[ ]")
- исправлено: код VK_DELETE убран из проверки параметра WM_CHAR, так
  как этот код (0x2E) совпадает с кодом символа '.'


7 Aug 2008
----------
- исправлена ошибка в HighlightCharacter(), бывшая тут с самого начала!..


30 Jul 2008
-----------
* решил переделать исходники на чистый C


Jul 2008
--------
* исходники обновлены под AkelPad 3.6.0


15 Apr 2008
-----------
* название плагина изменено на XBrackets,
  чтобы плагин срабатывал после Highlight


Dec 2007 - Jan 2008
-------------------
+ (опционально) автозавершение ' '
+ (опционально) автозавершение и подсветка < />
+ символ '=' добавлен в условие для bPrevCharOK
+ расширен диалог настроек


1 Nov 2007
----------
+ Совместимость с AkelPad 3.4.2


27 Sep 2007
-----------
+ Для диалога Settings (настройки) запрещена автозагрузка


26 Sep 2007
-----------
- Исправлено: для закомментированной скобки (C/C++/Pascal) искалась парная


25 Sep 2007
-----------
* исходники переделаны под AkelPad 3.4.0


26 Aug 2007
-----------
- Исправлено: подсвеченные скобки оставляли след на панели LineBoard
- Исправлено: некоторые внутренние переменные неправильно инициализировались


12 Jul 2007
-----------
* Свершилось :-)  Новая версия плагина - 1.3


06 Jul 2007
-----------
* некоторые внутренние изменения/доработки
* в частности, теперь вызов диалога настроек не активирует плагин,
  если он был неактивен (теперь Initialize не вызывается из Settings)


17 Jun 2007
-----------
* хорошо потормозил :-)
* наконец-то нашел время заняться плагином...
* торможу дальше...


04 May 2007
-----------
+ проверка расширения файла для отброса комментариев после // в файлах
  c, cpp, cxx, cc, h, hpp, pas


24 Mar 2007
-----------
+ изменение внутренней версии dll-файла (очень сложная процедура :-))


23 Mar 2007
-----------
+ совместимость только с AkelPad 3.3.0 (и выше)
+ добавлена обработка EM_EXSETSEL и EM_SETSEL


22 Mar 2007
-----------
+ исправлено: неправильное определение границ области редактирования (подсветка
    скобок не срабатывала в конце файла при активном плагине LineBoard)
+ добавлено: (настройка) автозакрытие скобок при уже имеющейся правой скобке
+ при сборке с помощью Build.cmd уменьшен размер dll-файла


21 Feb 2007
-----------
+ доработана библиотека функций HexStr.c


11 Feb 2007
-----------
+ исправлено: настройки не сохранялись при выходе из программы

Известные проблемы:
- при выделении мышью скобки подсвечиваются только по WM_LBUTTONUP.
Ну и хрен с ним :-)


10 Feb 2007
-----------
+ исправлено: падение при выгрузке плагина
+ изменено: настройки плагина читаются по Initialize
+ изменено: настройки плагина записываются по Uninitialize
+ изменено: подсветка скобок обновляется по Initialize/Uninitialize
+ изменено: подсветка скобок обновляется по изменению значения
    Highlight brackets в настройках
+ исправлено: подсветка скобок в выделении (цвет фона - COLOR_HIGHLIGHT)
+ исправлено: подсветка наклонной скобки под курсором (HideCaret)
+ !!! исправлено (по крайней мере, я пытался): скобки не перерисовывались
    по Paste/Cut/Undo/Redo/Delete/Backspace и замене/удалении выделения


08 Feb 2007
------------
* цвет активных скобок изменен на красный RGB(0xD0, 0x40, 0x40) по умолчанию
+ подсвеченные скобки перерисовываются после изменения цвета в диалоге Settings
(сразу после закрытия диалога)
+ при наличии выделения и отсутствии скобки в конце выделения проверяется, есть
ли скобка в начале выделения

Известные проблемы (для этой версии):
- при выделении мышью скобки подсвечиваются только по WM_LBUTTONUP.
- при использовании Courier New обычный, размер 10, видно, что левая скобка  "("
в выделении подсвечивается слегка глюкаво: после скобки видно белую тонкую
полосу на фоне темно-синего цвета выделения.
- при использовании немоноширинных курсивных шрифтов та часть скобки, которую
пересекает мигающий курсор, становится неподсвеченной.

